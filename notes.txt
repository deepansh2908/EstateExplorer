APPS:-
our project can contain several apps. 
Remember to register each app in the settings.py file
one of them is pages app which will display the home page, about page and any other static pages that we want to display
each app will have separate files for models, views execute_from_command_line

TEMPLATES:-
now for templates, first of all we have to let django know where to get templates from. So, remember to add it to templates dictionary in settings.py file

base.html is the base template that we are extending in other templates.

when we will deploy the project, we will run the command of 'collect static' which will go through all of our apps and find any static folder and puts it in the root static folder.

base.html has a block content. There are headers, navbar etc above it and footer below it. 

Django Template Language or DTL is a text-based Template language that provides a bridge between scripts like HTML, CSS, JS, etc. and programming languages like python. DTL is specifically built for developers to embed Django logic codes into HTML template files. Check out this - https://www.askpython.com/django/django-template-language#:~:text=Django%20Template%20Language%20or%20DTL,codes%20into%20HTML%20template%20files. 

creating 2 more apps in the name of listings and realtors

We have to make some changes to the database section in the setting file to connect postgres to our django application

make models in each app -> makemigrations -> migrate

now in the admin.py file of each app, we have to register our models to be able to access them in the admin section

now add media to the settings file just like we did for the static folder

each app has a views, urls, models file. urls direct them to a relevant method of a view. Now we can access the models file in the view method and pass it in the template (which makes our interface dynamic)

in the settings file of btre, we are adding humanize inside apps (it puts commas in the middle of a big number)

pagination is imp, look again at its implementation

so here is he basic summary: url -> view -> fetch data from database + some logic (like pagination) -> pass the context dictionary to the template and make it dynamic

to shorten the index.html template we have created a python dictionary and looped through it

create a new app named accounts

when a new user registers on the register.html template, we want the form data to POST to register url. Make sure to use a csrf token. Its basically a security precaution.

django has a pre installed app called messages 

the best part so far was form validation and user authentication

logout functionality is very important

Create a new app called Contacts -> create models -> now make a table in your database for this models by running makemigrations and then migrate command 

now for each app, we have models: we also need to register this model in the admin area to be able to see them there

now to send an email everytime there is a new enquiry that is submitted, we need to make some changes in settings file of btre.